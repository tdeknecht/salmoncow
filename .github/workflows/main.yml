name: CI
on: [push]

env:
  AWS_REGION: "us-east-1"
  AWS_ACCOUNT_ID: ""

permissions:
      id-token: write
      contents: read    # Required for actions/checkout@v2

jobs:
  build-infra:
    runs-on: ubuntu-latest
    container: 
      image: tdeknecht/aws:latest
      env:
        TF_VAR_RECAPTCHA_SECRET_KEY: ${{ secrets.TF_VAR_RECAPTCHA_SECRET_KEY }}
        TF_VAR_RECAPTCHA_SITE_KEY: ${{ secrets.TF_VAR_RECAPTCHA_SITE_KEY }}

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::117865246796:role/td000-dev-salmoncow-role
          role-session-name: salmoncowDeployer
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS
        run: |
          aws --version
          aws configure set region ${{ env.AWS_REGION }}

      - name: Set up tfvars
        working-directory: ./src/terraform
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          recaptcha_secret_key="${{ secrets.TF_VAR_RECAPTCHA_SECRET_KEY }}"
          EOF

      - name: Terraform INIT and PLAN
        run: |
          cd src/terraform
          terraform -version
          terraform init
          terraform plan

      - name: Terraform APPLY
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          cd src/terraform
          terraform apply -auto-approve

  deploy-app:
    runs-on: ubuntu-latest
    needs: [build-infra]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::117865246796:role/td000-dev-salmoncow-role
          role-session-name: salmoncowDeployer
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS
        run: |
          aws --version
          aws configure set region ${{ env.AWS_REGION }}

      - name: Build app
        env:
          REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          REACT_APP_COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID }}
          REACT_APP_COGNITO_PUB_JWKS: '{"keys":[{"alg":"RS256","e":"AQAB","kid":"yEWksOnjLe/Wovh3ez/fiviDbF4jVcZyHfQy+BR0oy8=","kty":"RSA","n":"qk_Zb2qyfUaOUY-wSpImbHqpEyKsOM5eQYe8d5NLldaWhsJHcdNKYe3hYZc91gK6BXfWTI0EiimT_n1ThwwRF5jOj7agz7euW301ejthKoRcVhJ-L68SN00QKop-9Nl7cEV6e6QLWKS8nrP_nIVdGo8H67PehymzjU-WZzqFRNxnIO5Metj41JXDiME7ycyNMv2cD5GEBnznv_J17UJ7TjItVNHzxO-lx4X1AOT5Y3a45hhfzqzzAd9D-DWgf54WxPeNUACJ8lkbbGkYSw5fTHr4-4V50oiHXN2QQl7P8M5zkT0UKt14CymkNajygEPnyjyDJNwSXDMDTSrNZ7E6zQ","use":"sig"},{"alg":"RS256","e":"AQAB","kid":"1RG8vUJj42i3rbUCTqeKS2CKedJ9QxSUT9N1X83fhEQ=","kty":"RSA","n":"vWzn3qdwbHBRqIV0CGIz7vWwt6Y80Inb57pkPnBYFRtVKC5yp4YOKwZSVGV_3GjcsvIvXr63wwAMETlmm4zFLq3ixC5wZzRbdm5Xd0eVgmQKvajX-b8ViBZTR9em25RBSlBJ9ClhpKCJAbr11ueuUKju4okBwITLGFi_SWhpEloJHWNMsuhVOY62g3BEOqkzxR1FfT_R56uazxZx17bikUZSFmFy7NX8-f64FgWLcvVbL9HaOZ9sBAJuiNtfJRYv3Bg8FfMacdndi6iXyp_f8DDf5aSnGmVEwtGqsrrETy6LKIF4iq2UB3gvFeOrTvJoB1DwhDTrfLrTBGimymH6yQ","use":"sig"}]}'
          REACT_APP_COGNITO_REFRESH_TOKEN: ""
          REACT_APP_COGNITO_ID_TOKEN: ""
          REACT_APP_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
        run: |
          cd src/spa
          npm install
          npm run build
      
      - name: Copy files
        run: |
          cd src/spa/build
          aws s3 sync . s3://salmoncow.com --delete